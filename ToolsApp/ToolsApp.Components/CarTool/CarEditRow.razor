@using ToolsApp.Components.CarTool.Models
@using CarFormModel = ToolsApp.Components.CarTool.Models.CarForm


<tr>
  <td>@Car.Id</td>
  <td><input type="text" @bind="@carForm.Make" /></td>
  <td><input type="text" @bind="@carForm.Model" /></td>
  <td><input type="number" @bind="@carForm.Year" /></td>
  <td><input type="text" @bind="@carForm.Color" /></td>
  <td><input type="number" @bind="@carForm.Price" /></td>
  <td>
    <button type="button" @onclick="@saveCar">Save</button>
    <button type="button"
      @onclick="@(async () => await OnCancelCar.InvokeAsync())">
      Cancel</button>
  </td>
</tr>

@code {

  [Parameter]
  public ICar Car { get; set; }

  [Parameter]
  public EventCallback<ICar> OnSaveCar { get; set; }

  [Parameter]
  public EventCallback OnCancelCar { get; set; }

  private CarFormModel carForm;

  private IMapper mapper = CarToolMapper.GetMapper();

  protected override async Task OnInitializedAsync()
  {
    carForm = mapper.Map<ICar, CarFormModel>(Car);
  }

  private async Task saveCar()
  {
    var car = mapper.Map<CarFormModel, Car>(carForm);
    car.Id = Car.Id;
    await OnSaveCar.InvokeAsync(car);
  }

}
