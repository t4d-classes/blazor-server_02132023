@typeparam TItem
@typeparam TItemId

@if (Header is not null)
{
  <header>
    @Header
  </header>
}
<ul>
  @if (Items.Any() && ItemTemplate is not null) {
    @foreach (var item in Items)
    {
      <li>
        @ItemTemplate(item)
        <button type="button" @onclick="@(async () => await doAction(item))"
            style="background-color: @uiTheme?.DangerButton?.BackgroundColor;
            color:@uiTheme?.DangerButton?.TextColor">
            @ActionButtonText
        </button>
      </li>
    }
  } else {
    <li>@EmptyMessage</li>
  }
</ul>

@code {

  [CascadingParameter(Name="UITheme")]
  private UITheme? uiTheme { get; set; }


  [Parameter]
  public string ActionButtonText { get; set; } = "Select";

  [Parameter]
  public RenderFragment EmptyMessage { get; set; } =@<span>No Items</span>;

  [Parameter]
  public RenderFragment? Header { get; set; }

  [Parameter]
  public RenderFragment<TItem>? ItemTemplate { get; set; }

  [Parameter]
  public IEnumerable<TItem> Items { get; set; } = new List<TItem>();

  [Parameter]
  public Func<TItem, TItemId>? GetId { get; set;  }

  [Parameter]
  public EventCallback<TItemId> OnItemAction { get; set; }

  private async Task doAction(TItem item)
  {
    if (GetId is not null)
    {
      await OnItemAction.InvokeAsync(GetId(item));
    }
  }

}

